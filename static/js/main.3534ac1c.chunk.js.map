{"version":3,"sources":["objectAttributeAccessor.js","images/flag.svg","images/mine.svg","images/flagged-mine.svg","images/clicked-mine.svg","Cell.js","generateField.js","Field.js","Header.js","Rules.js","Footer.js","App.js","index.js"],"names":["extract","obj","attr","flag","src","flagImage","alt","hiddenMine","hiddenMineImage","flaggedMine","flaggedMineImage","clickedMine","clickedMineImage","cellDisplay","hasMine","state","adjCount","gameState","cellClass","buttonClass","toString","handleLeftClick","r","c","mineCount","setRevealCount","setGameState","field","setField","cell","rowInd","colInd","length","m","n","cellCount","adjCellCount","getNeighbours","excessMines","Math","max","nonClickAdjArr","generateShuffledMineArray","clickAdjArr","newField","isNeighbour","pop","mineArraysToField","forEach","r0","c0","assignAdjCounts","generateMines","cascadeReveal","filter","hasFullFlags","revealNonFlagNeighbours","Cell","args","setFlagCount","className","type","onClick","onContextMenu","e","preventDefault","prev","handleRightClick","directions","skeletonField","rows","columns","i","newRow","j","push","len","mines","arr","swap_i","getRandomInt","shuffle","d1","abs","d2","map","dr","dc","lower","upper","floor","random","resetField","inputs","setMineCount","stack","revealCount","Field","row","cellData","difficultyList","inputList","isValidInput","inp","presets","diff","displayDifficulty","difficulty","toLowerCase","displayMineDensity","round","tooltip","adjustNumber","setInputs","change","num","DifficultyRadio","id","name","value","checked","onChange","target","updateDifficulty","htmlFor","Input","input","str","test","isNumber","updateAnInput","style","color","Header","useState","startStandard","every","alert","startCustom","RulesText","Rules","isOpen","setIsOpen","message","Footer","flagCount","App","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3534ac1c.chunk.js","sourcesContent":["export function extract(obj, attr) {\n  return obj.[attr];\n}\n","export default __webpack_public_path__ + \"static/media/flag.12de066e.svg\";","export default __webpack_public_path__ + \"static/media/mine.99a3231c.svg\";","export default __webpack_public_path__ + \"static/media/flagged-mine.419c9e8a.svg\";","export default __webpack_public_path__ + \"static/media/clicked-mine.90b81e3c.svg\";","import {\n  generateMines,\n  cascadeReveal,\n  hasFullFlags,\n  revealNonFlagNeighbours,\n} from \"./Field.js\";\n\nimport flagImage from \"./images/flag.svg\";\nimport hiddenMineImage from \"./images/mine.svg\";\nimport flaggedMineImage from \"./images/flagged-mine.svg\";\nimport clickedMineImage from \"./images/clicked-mine.svg\";\n\nconst flag = <img src={flagImage} alt=\"F\" />;\nconst hiddenMine = <img src={hiddenMineImage} alt=\"M\" />;\nconst flaggedMine = <img src={flaggedMineImage} alt=\"FM\" />;\nconst clickedMine = <img src={clickedMineImage} alt=\"!!!\" />;\n\nfunction cellDisplay(hasMine, state, adjCount, gameState) {\n  if (gameState === \"reset\" || gameState === \"ongoing\") {\n    switch (state) {\n      case \"hide\":\n        return \"\";\n      case \"show\":\n        return adjCount;\n      case \"flag\":\n        return flag;\n      default:\n        return \"Error!\";\n    }\n  } else if (gameState === \"won\") {\n    if (!hasMine) {\n      return adjCount;\n    } else if (state === \"hide\") {\n      return hiddenMine;\n    } else {\n      //state === \"flag\"\n      return flaggedMine;\n    }\n  } else if (gameState === \"lost\") {\n    if (hasMine) {\n      switch (state) {\n        case \"hide\":\n          return hiddenMine;\n        case \"show\":\n          return clickedMine;\n        case \"flag\":\n          return flaggedMine;\n        default:\n          return \"Error!\";\n      }\n    } else {\n      switch (state) {\n        case \"hide\":\n          return \"\";\n        case \"show\":\n          return adjCount;\n        case \"flag\":\n          return flag;\n        default:\n          return \"Error!\";\n      }\n    }\n  }\n}\n\nfunction cellClass(hasMine, state, adjCount, gameState) {\n  if (state === \"show\") {\n    // nothing is clickable once game is over\n    return \"cell\";\n  }\n  return \"cell hidden\";\n}\n\nfunction buttonClass(hasMine, state, adjCount, gameState) {\n  if (gameState === \"won\" || gameState === \"lost\") {\n    // nothing is clickable once game is over\n    return \"_\" + adjCount.toString();\n  }\n  if (state === \"hide\") {\n    return \"clickable\";\n  }\n  return \"_\" + adjCount.toString();\n}\n\nfunction handleLeftClick(\n  r,\n  c,\n  mineCount,\n  setRevealCount,\n  gameState,\n  setGameState,\n  field,\n  setField\n) {\n  // don't do anything if the game is over\n  if (gameState === \"won\" || gameState === \"lost\") {\n    return;\n  }\n  let cell = field[r][c];\n  // generate the mines if this is the first click\n  if (gameState === \"reset\" && cell.state === \"hide\") {\n    setGameState(\"ongoing\");\n    generateMines(r, c, mineCount, field, setField);\n  }\n  // now gameState is ongoing\n  // now reveal the cell and perform other actions as necessary\n  if (cell.state === \"hide\" && cell.hasMine) {\n    // just lost: reveal current cell...\n    let newField = [...field];\n    newField[r][c].state = \"show\";\n    setField(newField);\n    // ... and  trigger loss\n    setGameState(\"lost\");\n  } else if (cell.state === \"hide\") {\n    // no mine: reveal cell, and iterate on any neighbours with 0 adj mines\n    cascadeReveal([[r, c]], setRevealCount, setGameState, field, setField);\n    // there is a useEffect to check when the game is won\n  } else if (cell.state === \"show\" && hasFullFlags(r, c, field)) {\n    revealNonFlagNeighbours(\n      r,\n      c,\n      setRevealCount,\n      setGameState,\n      field,\n      setField\n    );\n  }\n}\n\nfunction handleRightClick(e, r, c, gameState, setFlagCount, field, setField) {\n  e.preventDefault();\n  // don't do anything if the game is over\n  if (gameState === \"won\" || gameState === \"lost\") {\n    return;\n  }\n  let cell = field[r][c];\n  if (cell.state === \"hide\") {\n    setField((prev) => {\n      let newField = [...prev];\n      newField[r][c].state = \"flag\";\n      return newField;\n    });\n    setFlagCount((prev) => prev + 1);\n  } else if (cell.state === \"flag\") {\n    setField((prev) => {\n      let newField = [...prev];\n      newField[r][c].state = \"hide\";\n      return newField;\n    });\n    setFlagCount((prev) => prev - 1);\n  }\n}\n\n// always return a button, style it differently based on classname\n// won't act like a button sometimes\nfunction Cell({ args }) {\n  let {\n    rowInd,\n    colInd,\n    hasMine,\n    setRevealCount,\n    setFlagCount,\n    state,\n    adjCount,\n    mineCount,\n    gameState,\n    setGameState,\n    field,\n    setField,\n  } = args;\n  return (\n    <td className={cellClass(hasMine, state, adjCount, gameState)}>\n      <button\n        type=\"button\"\n        className={buttonClass(hasMine, state, adjCount, gameState)}\n        onClick={() =>\n          handleLeftClick(\n            rowInd,\n            colInd,\n            mineCount,\n            setRevealCount,\n            gameState,\n            setGameState,\n            field,\n            setField\n          )\n        }\n        onContextMenu={(e) =>\n          handleRightClick(\n            e,\n            rowInd,\n            colInd,\n            gameState,\n            setFlagCount,\n            field,\n            setField\n          )\n        }\n      >\n        {cellDisplay(hasMine, state, adjCount, gameState)}\n      </button>\n    </td>\n  );\n}\n\nexport default Cell;\n","const directions = [\n  [-1, 1],\n  [0, 1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n  [0, -1],\n  [-1, -1],\n  [-1, 0],\n];\n\nfunction skeletonField(rows, columns) {\n  let newField = [];\n  for (var i = 0; i < rows; i++) {\n    // create a new row in the field\n    let newRow = [];\n    for (var j = 0; j < columns; j++) {\n      // create a new cell in the row\n      newRow.push({ state: \"hide\", adjCount: 0 });\n    }\n    newField.push(newRow);\n  }\n  return newField;\n}\n\n// add mine locations and adj counts to field, given first click location\n//  (clicked cell should be a 0 if possible)\nfunction generateMines(rowInd, colInd, mineCount, field, setField) {\n  let [m, n] = [field.length, field[0].length];\n  let cellCount = m * n;\n  let adjCellCount = getNeighbours(rowInd, colInd, m, n).length;\n  // how many mines must bleed into the cells adj to clicked\n  // set this to 0 to dynamically enforce max mineCount so click is always 0\n  let excessMines = Math.max(0, mineCount - (cellCount - (adjCellCount + 1)));\n  // generate shuffled array for mine locations of non-adjacent cells\n  let nonClickAdjArr = generateShuffledMineArray(\n    cellCount - (adjCellCount + 1),\n    mineCount - excessMines\n  );\n  // generate shuffled array for mine locations of adjacent cells\n  let clickAdjArr = generateShuffledMineArray(adjCellCount, excessMines);\n  // add mines to actual field state using those two arrays\n  mineArraysToField(\n    rowInd,\n    colInd,\n    nonClickAdjArr,\n    clickAdjArr,\n    field,\n    setField\n  );\n  // assign arj counts based on newly placed mines\n  assignAdjCounts(field, setField);\n}\n\n// shuffled array of length len with max(mines,len) mines\nfunction generateShuffledMineArray(len, mines) {\n  let arr = [];\n  // create sorted array with mines...\n  for (let i = 0; i < len; i++) {\n    if (i < mines) {\n      arr.push(true);\n    } else {\n      arr.push(false);\n    }\n  }\n  // ... and then shuffle it\n  return shuffle(arr);\n}\n\nfunction shuffle(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    let swap_i = getRandomInt(i, arr.length - 1);\n    [arr[i], arr[swap_i]] = [arr[swap_i], arr[i]];\n  }\n  return arr;\n}\n\nfunction mineArraysToField(\n  rowInd,\n  colInd,\n  nonClickAdjArr,\n  clickAdjArr,\n  field,\n  setField\n) {\n  let newField = [...field];\n  for (let r = 0; r < field.length; r++) {\n    for (let c = 0; c < field[0].length; c++) {\n      if (r === rowInd && c === colInd) {\n        // this is the clicked cell, no mine here\n        newField[r][c].hasMine = false;\n      } else if (isNeighbour(r, c, rowInd, colInd)) {\n        // this is adj to clicked cell, so sample from adj arr\n        newField[r][c].hasMine = clickAdjArr.pop();\n      } else {\n        // this is not adj, so sample from non-adj arr\n        newField[r][c].hasMine = nonClickAdjArr.pop();\n      }\n    }\n  }\n  setField(newField);\n}\n\nfunction isNeighbour(r, c, r0, c0) {\n  let d1 = Math.abs(r - r0);\n  let d2 = Math.abs(c - c0);\n  return d1 <= 1 && d2 <= 1 && d1 + d2 > 0;\n}\n\nfunction assignAdjCounts(field, setField) {\n  let newField = [...field];\n  for (let r = 0; r < field.length; r++) {\n    for (let c = 0; c < field[0].length; c++) {\n      // count the mines adj to [r,c] (not including itself)\n      getNeighbours(r, c, field.length, field[0].length).forEach(([r0, c0]) => {\n        if (field[r0][c0].hasMine) {\n          newField[r][c].adjCount += 1;\n        }\n      });\n    }\n  }\n  setField(newField);\n}\n\nfunction getNeighbours(r, c, m, n) {\n  return (\n    directions\n      .map(([dr, dc]) => [r + dr, c + dc])\n      // check whether the potential neighbour is in the field bounds\n      .filter(([r0, c0]) => 0 <= r0 && r0 < m && 0 <= c0 && c0 < n)\n  );\n}\n\n// inclusive of end-points\nfunction getRandomInt(lower, upper) {\n  return Math.floor(Math.random() * (upper - lower + 1)) + lower;\n}\n\nexport { skeletonField, generateMines, getNeighbours };\n\n// testing\n\n//export { getNeighbours };\n","import Cell from \"./Cell.js\";\n\nimport {\n  skeletonField,\n  generateMines,\n  getNeighbours,\n} from \"./generateField.js\";\n\nfunction resetField(\n  inputs,\n  setMineCount,\n  setRevealCount,\n  setFlagCount,\n  setGameState,\n  setField\n) {\n  let { rows, columns, mines } = inputs;\n  setGameState(\"reset\");\n  setMineCount(mines);\n  setRevealCount(0);\n  setFlagCount(0);\n  // create a new field with no data (wait until first click)\n  setField(skeletonField(rows, columns));\n}\n\n// have stack of cells (any state and any hasMine)\n// reveal if hidden;\n// and if it isn't a mine and adjCount is 0, then add all neighbours to stack\nfunction cascadeReveal(stack, setRevealCount, setGameState, field, setField) {\n  while (stack.length > 0) {\n    let [r, c] = stack.pop();\n    // otherwise already processed it earlier in the stack\n    if (field[r][c].state === \"hide\") {\n      // reveal it\n      let newField = [...field];\n      newField[r][c].state = \"show\";\n      setField(newField);\n      if (field[r][c].hasMine) {\n        // ... and  trigger loss\n        setGameState(\"lost\");\n      } else {\n        // update revealCount\n        setRevealCount((revealCount) => revealCount + 1);\n        // if it's adjCount is 0, add hidden neighbours to stack\n        if (field[r][c].adjCount === 0) {\n          getNeighbours(r, c, field.length, field[0].length).forEach(\n            ([r0, c0]) => {\n              if (field[r0][c0].state === \"hide\") {\n                stack.push([r0, c0]);\n              }\n            }\n          );\n        }\n      }\n    }\n  }\n}\n\n// reveal all non-flagged, adj cells\nfunction revealNonFlagNeighbours(\n  r,\n  c,\n  setRevealCount,\n  setGameState,\n  field,\n  setField\n) {\n  let [m, n] = [field.length, field[0].length];\n  cascadeReveal(\n    getNeighbours(r, c, m, n),\n    setRevealCount,\n    setGameState,\n    field,\n    setField\n  );\n}\n\n// check if adj flag count is equal to adj mine count\nfunction hasFullFlags(r, c, field) {\n  let [m, n] = [field.length, field[0].length];\n  return (\n    field[r][c].adjCount ===\n    getNeighbours(r, c, m, n).filter(([r0, c0]) => {\n      return field[r0][c0].state === \"flag\";\n    }).length\n  );\n}\n\nfunction Field({ args }) {\n  let {\n    mineCount,\n    setRevealCount,\n    setFlagCount,\n    gameState,\n    setGameState,\n    field,\n    setField,\n  } = args;\n  return (\n    <table className=\"field\">\n      <tbody>\n        {field.map((row, rowInd) => {\n          return (\n            <tr key={rowInd}>\n              {row.map((cellData, colInd) => {\n                return (\n                  <Cell\n                    key={colInd}\n                    args={{\n                      ...cellData,\n                      rowInd,\n                      colInd,\n                      mineCount,\n                      setRevealCount,\n                      setFlagCount,\n                      gameState,\n                      setGameState,\n                      field,\n                      setField,\n                    }}\n                  />\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport { resetField, skeletonField };\n\n// for Cell.js\nexport { generateMines, cascadeReveal, hasFullFlags, revealNonFlagNeighbours };\n\nexport default Field;\n","import { useState } from \"react\";\n\nimport { extract } from \"./objectAttributeAccessor.js\";\nimport { resetField } from \"./Field.js\";\n\n// constants\n\nconst difficultyList = [\"Easy\", \"Medium\", \"Hard\"];\nconst inputList = [\"Rows\", \"Columns\", \"Mines\"];\n\n// helper functions\n\nfunction isNumber(str) {\n  return str === \"\" || /^[0-9\\b]+$/.test(str);\n}\n\nfunction isValidInput(inp, inputs) {\n  let { rows, columns, mines } = inputs;\n  switch (inp) {\n    case \"mines\":\n      return 0 <= mines && mines < rows * columns;\n    case \"rows\":\n      return 0 < rows && rows <= 24;\n    case \"columns\":\n      return 0 < columns && columns <= 30;\n    default:\n      // shouldn't happen\n      return false;\n  }\n}\n\nfunction presets(diff) {\n  switch (diff) {\n    case \"easy\":\n      return { rows: 9, columns: 9, mines: 10 };\n    case \"medium\":\n      return { rows: 16, columns: 16, mines: 40 };\n    case \"hard\":\n      return { rows: 16, columns: 30, mines: 99 };\n    default:\n      // shouldn't happen\n      return { rows: 10, columns: 10, mines: 99 };\n  }\n}\n\nfunction displayDifficulty(difficulty) {\n  let diff = difficulty.toLowerCase();\n  let { rows, columns, mines } = presets(diff);\n  return rows + \"x\" + columns + \", \" + mines + \" mines\";\n}\n\nfunction displayMineDensity(inputs) {\n  return (\n    <div className=\"density\">\n      Mine density:{\" \"}\n      {inputs.rows > 0 && inputs.columns > 0\n        ? Math.round((100 * inputs.mines) / (inputs.rows * inputs.columns)) +\n          \"%\"\n        : \"N/A\"}\n    </div>\n  );\n}\n\nfunction tooltip(inp) {\n  // input boxes already enforce digits-only (ie non-negative integers)\n  switch (inp) {\n    case \"rows\":\n      return \"Must be between 1 and 24 inclusive.\";\n    case \"columns\":\n      return \"Must be between 1 and 30 inclusive.\";\n    case \"mines\":\n      return \"Must be fewer mines than cells.\";\n    default:\n      // shouldn't happen\n      return \"An unknown error has occured.\";\n  }\n}\n\n// click handlers\n\nfunction updateDifficulty(e, inputs, setInputs) {\n  setInputs({ ...inputs, difficulty: e.target.value });\n}\n\nfunction updateAnInput(e, inputs, setInputs, inp) {\n  let str = e.target.value;\n  let num = +str;\n  // only proceed if the value consists of digits (or is blank)\n  if (isNumber(str)) {\n    setInputs({ ...inputs, [inp]: num });\n  }\n}\n\nfunction adjustNumber(inp, inputs, setInputs, change) {\n  let num = extract(inputs, inp); //inputs.[inp] // prettier doesn't like it\n  // only proceed if the number will remain positive\n  if (change > 0 || num > 0) {\n    setInputs({ ...inputs, [inp]: num + change });\n  }\n}\n\nfunction startCustom(\n  inputs,\n  setMineCount,\n  setRevealCount,\n  setFlagCount,\n  setGameState,\n  setField\n) {\n  let isValid = inputList.every((input) =>\n    isValidInput(input.toLowerCase(), inputs)\n  );\n  if (isValid) {\n    // discard difficulty from inputs\n    resetField(\n      inputs,\n      setMineCount,\n      setRevealCount,\n      setFlagCount,\n      setGameState,\n      setField\n    );\n  } else {\n    alert('Invalid parameters. However over red \"x\"s for details.');\n  }\n}\n\nfunction startStandard(\n  diff,\n  setMineCount,\n  setRevealCount,\n  setFlagCount,\n  setGameState,\n  setField\n) {\n  // based on radio button selection so always valid\n  let inputs = presets(diff);\n  resetField(\n    inputs,\n    setMineCount,\n    setRevealCount,\n    setFlagCount,\n    setGameState,\n    setField\n  );\n}\n\n// function components\n\nfunction DifficultyRadio({ difficulty, inputs, setInputs }) {\n  let diff = difficulty.toLowerCase();\n  return (\n    <div className=\"radio\">\n      <input\n        type=\"radio\"\n        id={diff}\n        name=\"difficulty\"\n        value={diff}\n        checked={inputs.difficulty === diff}\n        onChange={(e) => updateDifficulty(e, inputs, setInputs)}\n      />\n      <label htmlFor={diff}>\n        <div className=\"diff\">{difficulty + \":\"}</div>\n        <div className=\"desc\">{displayDifficulty(difficulty)}</div>\n      </label>\n    </div>\n  );\n}\n\nfunction Input({ input, inputs, setInputs }) {\n  let inp = input.toLowerCase();\n  return (\n    <>\n      <div className=\"input\">\n        <label htmlFor={inp}>{input}:</label>\n        <button\n          type=\"button\"\n          onClick={() => adjustNumber(inp, inputs, setInputs, -1)}\n        >\n          -\n        </button>\n        <input\n          type=\"text\"\n          id={inp}\n          name={inp}\n          value={extract(inputs, inp)} //{inputs.[inp]} // prettier doesn't like it\n          onChange={(e) => updateAnInput(e, inputs, setInputs, inp)}\n        />\n        <button\n          type=\"button\"\n          onClick={() => adjustNumber(inp, inputs, setInputs, 1)}\n        >\n          +\n        </button>\n        {isValidInput(inp, inputs) ? (\n          <span style={{ color: \"green\" }}>&#10003;</span>\n        ) : (\n          <span className=\"toolcontainer\" style={{ color: \"red\" }}>\n            &#10007;<span className=\"tooltip\">{tooltip(inp)}</span>\n          </span>\n        )}\n      </div>\n    </>\n  );\n}\n\n// primary component\n\nfunction Header({ args }) {\n  let {\n    setMineCount,\n    setRevealCount,\n    setFlagCount,\n    setGameState,\n    setField,\n  } = args;\n\n  const [inputs, setInputs] = useState({\n    rows: 9,\n    columns: 9,\n    mines: 10,\n    difficulty: \"easy\",\n  });\n\n  return (\n    <>\n      {/* standard game options */}\n      <div className=\"options\">\n        <div className=\"option\">\n          <h4>Standard Game</h4>\n          {difficultyList.map((difficulty) => {\n            return (\n              <DifficultyRadio\n                key={difficulty}\n                difficulty={difficulty}\n                inputs={inputs}\n                setInputs={setInputs}\n              />\n            );\n          })}\n          {displayMineDensity(presets(inputs.difficulty))}\n          <button\n            type=\"button\"\n            className=\"start\"\n            onClick={() =>\n              startStandard(\n                inputs.difficulty,\n                setMineCount,\n                setRevealCount,\n                setFlagCount,\n                setGameState,\n                setField\n              )\n            }\n          >\n            Start Standard Game\n          </button>\n        </div>\n\n        {/* custom game inputs */}\n        <div className=\"option\">\n          <h4>Custom Game</h4>\n          {inputList.map((input) => {\n            return (\n              <Input\n                key={input}\n                input={input}\n                inputs={inputs}\n                setInputs={setInputs}\n              />\n            );\n          })}\n          {displayMineDensity(inputs)}\n          <button\n            type=\"button\"\n            className=\"start\"\n            onClick={() =>\n              startCustom(\n                inputs,\n                setMineCount,\n                setRevealCount,\n                setFlagCount,\n                setGameState,\n                setField\n              )\n            }\n          >\n            Start Custom Game\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Header;\n\n// for testing\n\nexport { isNumber, isValidInput };\n","import { useState } from \"react\";\n\nfunction RulesText() {\n  return (\n    <div>\n      <h4>Rules</h4>\n      <p>\n        All cells start covered. Certain cells have mines hidden underneath\n        them. The goal is to uncover all the cells without mines. If you uncover\n        a mine, you lose.\n      </p>\n      <p>\n        When you uncover a non-mine cell, it will show you how many of the (up\n        to 8) adjacent cells contain mines -- or, if there are no adjacent\n        mines, it will automatically uncover all adjacent cells for you.\n      </p>\n      <p>\n        You can mark cells that you think contain mines with a flag by\n        right-clicking on them. Clicking a flagged cell will do nothing -- so\n        you can't accidentally click it later. To unflag a cell, simply\n        right-click it again.\n      </p>\n      <p>\n        If you click an aready-uncovered cell and it's number matches the number\n        of adjacent flags, all other adjecent cells will be uncovered. This can\n        save you some clicks, but isn't necessary.\n      </p>\n      <p>\n        For a custom game, a mine density between 12% and 20% is recommended.\n      </p>\n    </div>\n  );\n}\n\nfunction Rules() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"rules\"\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        {isOpen ? \"Hide Rules\" : \"Show Rules\"}\n      </button>\n      {isOpen && <RulesText />}\n    </>\n  );\n}\n\nexport default Rules;\n","// TODO: add links to related: https://pwmarcz.pl/kaboom/ and https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/mines.html\n// TODO: timer, if not too difficulty\n// TODO: high-scores, if local storage is easy\n\nimport Rules from \"./Rules.js\";\n\nfunction message(gameState) {\n  switch (gameState) {\n    case \"reset\":\n      return \"The field is reset. Click anywhere to begin.\";\n    case \"ongoing\":\n      return \"The game is in progress.\";\n    case \"won\":\n      return \"Congratulations, you won!\";\n    case \"lost\":\n      return \"Uh oh, you uncovered a mine. You lost.\";\n    default:\n      return \"You found an error!\";\n  }\n}\n\nfunction Footer({ args }) {\n  let { gameState, flagCount } = args;\n  return (\n    <>\n      <p>\n        Flags: <span className=\"fixed-width-span\">{flagCount}</span>\n      </p>\n      <p>{message(gameState)}</p>\n      <Rules />\n    </>\n  );\n}\n\nexport default Footer;\n","import { useState, useEffect } from \"react\";\n\nimport Header from \"./Header.js\";\nimport Field from \"./Field.js\";\nimport Footer from \"./Footer\";\n\nimport { skeletonField } from \"./generateField.js\";\n\nimport \"./index.css\";\nimport \"./header.css\";\nimport \"./field.css\";\nimport \"./cell.css\";\nimport \"./footer.css\";\n\nfunction App() {\n  // Constants\n\n  // how many mines the field has\n  const [mineCount, setMineCount] = useState(10);\n  // how many non-mine cells have been revealed\n  const [revealCount, setRevealCount] = useState(0);\n  // how many flags are currently placed\n  const [flagCount, setFlagCount] = useState(0);\n  // reset, ongoing, won, lost\n  const [gameState, setGameState] = useState(\"reset\");\n  // each cell is hasMine (t/f), state (show/hide/flag), adjCount (#)\n  const [field, setField] = useState(skeletonField(9, 9));\n\n  // effects\n\n  // check whether game is won\n  useEffect(() => {\n    if (revealCount + mineCount === field.length * field[0].length) {\n      setGameState(\"won\");\n    }\n  }, [revealCount, mineCount, field]);\n\n  // return\n\n  return (\n    <>\n      <h1>Minesweeper</h1>\n      <Header\n        args={{\n          setMineCount,\n          setRevealCount,\n          setFlagCount,\n          setGameState,\n          setField,\n        }}\n      />\n      <Field\n        args={{\n          mineCount,\n          gameState,\n          setGameState,\n          field,\n          setField,\n          setRevealCount,\n          setFlagCount,\n        }}\n      />\n      <Footer args={{ gameState, flagCount }} />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}