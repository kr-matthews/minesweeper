{"version":3,"sources":["objectAttributeAccessor.js","generateField.js","Field.js","Header.js","Rules.js","Footer.js","App.js","index.js"],"names":["extract","obj","attr","skeletonField","rows","columns","newField","i","newRow","j","push","state","generateMines","rowInd","colInd","mineCount","field","setField","console","log","arr","len","mines","length","swap_i","getRandomInt","shuffle","generateShuffledMineArray","ind","splice","insertNonMine","r","c","hasMine","mineArrayToField","alert","lower","upper","Math","floor","random","resetField","inputs","setMineCount","setGameState","handleClick","gameState","cell","Cell","args","adjCount","className","type","onClick","Field","map","row","cellData","difficultyList","inputList","isValidInput","inp","presets","diff","displayDifficulty","difficulty","toLowerCase","tooltip","adjustNumber","setInputs","change","num","DifficultyRadio","id","name","value","checked","onChange","e","target","updateDifficulty","htmlFor","Input","input","str","test","isNumber","updateAnInput","style","color","round","Header","useState","startStandard","every","startCustom","RulesText","Rules","isOpen","setIsOpen","Footer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dec411cc.chunk.js","sourcesContent":["export function extract(obj, attr) {\n  return obj.[attr];\n}\n","function skeletonField(rows, columns) {\n  let newField = [];\n  for (var i = 0; i < rows; i++) {\n    // create a new row in the field\n    let newRow = [];\n    for (var j = 0; j < columns; j++) {\n      // create a new cell in the row\n      newRow.push({ state: \"hide\" });\n    }\n    newField.push(newRow);\n  }\n  return newField;\n}\n\n// add mine locations to field, plus adj counts, given first click location\n//  (no mine on clicked cell)\nfunction generateMines(rowInd, colInd, mineCount, field, setField) {\n  console.log(\"I am generating mines.\");\n\n  // generate shuffled array of field size - 1 with mineCount mines\n  let arr = generateShuffledMineArray(\n    field.length * field[0].length - 1,\n    mineCount\n  );\n  // insert mine-free spot corresponding to clicked cell location\n  insertNonMine(arr, rowInd * field[0].length + colInd);\n  // add mines to field\n  mineArrayToField(arr, field, setField);\n  // use array to place mines in actual field\n  assignAdjCounts();\n  alert(\n    \"It only generates the random mine locations, you can't continue from here.\"\n  );\n}\n\nfunction generateShuffledMineArray(len, mines) {\n  let arr = [];\n  // create sorted array with mines...\n  for (let i = 0; i < len; i++) {\n    if (i < mines) {\n      arr.push(true);\n    } else {\n      arr.push(false);\n    }\n  }\n  // ... and then shuffle it\n  return shuffle(arr);\n}\n\nfunction shuffle(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    let swap_i = getRandomInt(i, arr.length - 1);\n    [arr[i], arr[swap_i]] = [arr[swap_i], arr[i]];\n  }\n  return arr;\n}\n\nfunction insertNonMine(arr, ind) {\n  arr.splice(ind, 0, false);\n  return arr; // for testing\n}\n\nfunction mineArrayToField(arr, field, setField) {\n  let newField = [...field];\n  for (let r = 0; r < field.length; r++) {\n    for (let c = 0; c < field[0].length; c++) {\n      newField[r][c].hasMine = arr[r * field[0].length + c];\n    }\n  }\n  setField(newField);\n  return field; // for testing\n}\n\nfunction assignAdjCounts() {\n  // TODO:\n}\n\nfunction updateIndices(r, c, n) {\n  if (c === n - 1) {\n    return [r + 1, 0];\n  } else {\n    return [r, c + 1];\n  }\n}\n\n// inclusive of end-points\nfunction getRandomInt(lower, upper) {\n  return Math.floor(Math.random() * (upper - lower + 1)) + lower;\n}\n\nexport { skeletonField, generateMines };\n\n// for testing\n\nexport { updateIndices, insertNonMine };\n","// TODO: unfinished function definitions tagged with todo\n// TODO: redo Cell component to deal with all cases\n// TODO: style cells\n\nimport { skeletonField, generateMines } from \"./generateField.js\";\n\nfunction resetField(inputs, setMineCount, setGameState, setField) {\n  let { rows, columns, mines } = inputs;\n  setGameState(\"reset\");\n  setMineCount(mines);\n  // create a new field with no data (wait until first click)\n  setField(skeletonField(rows, columns));\n}\n\nfunction unhideCascade() {\n  // TODO:\n  console.log(\"I am doing a cascade.\");\n}\n\nfunction presentWin() {\n  // TODO:\n  console.log(\"I am presenting a win.\");\n}\n\nfunction presentLoss() {\n  // TODO:\n  console.log(\"I am presenting a loss\");\n}\n\n// TODO: setup state for revealed squares, then can check if +mineCount=size\n// but be careful about checking game isn't lost\nfunction won() {\n  // TODO:\n  console.log(\"I am checking a potential win.\");\n  return false;\n}\n\nfunction handleClick(\n  rowInd,\n  colInd,\n  mineCount,\n  gameState,\n  setGameState,\n  field,\n  setField\n) {\n  let cell = field[rowInd][colInd];\n  // generate the mines if this is the first click\n  if (gameState === \"reset\") {\n    setGameState(\"ongoing\");\n    generateMines(rowInd, colInd, mineCount, field, setField);\n  }\n  // reveal current cell, and recurse or trigger loss\n  if (cell.state === \"hide\" && !cell.hasMine) {\n    // reveal cell, and recurse on any neighbours with 0 adj mines\n    unhideCascade([[rowInd, colInd]], field, setField);\n  } else if (cell.state === \"hide\" && cell.hasMine) {\n    // just lost\n    setGameState(\"lost\");\n    presentLoss(field, setField);\n  }\n  // check whether they just won\n  if (won(field)) {\n    setGameState(\"won\");\n    presentWin(field, setField);\n  }\n}\n\n// always return a button, style it differently based on classname\n// won't act like a button sometimes\nfunction Cell({ args }) {\n  let {\n    rowInd,\n    colInd,\n    hasMine,\n    state,\n    adjCount,\n    mineCount,\n    gameState,\n    setGameState,\n    field,\n    setField,\n  } = args;\n  return (\n    <td className=\"cell\">\n      <button\n        type=\"button\"\n        className=\"clickable todo\"\n        onClick={() =>\n          handleClick(\n            rowInd,\n            colInd,\n            mineCount,\n            gameState,\n            setGameState,\n            field,\n            setField\n          )\n        }\n      >\n        {/* TEMP: should be \"show\" not \"hide\" */}\n        {state === \"hide\" ? (hasMine ? \"M\" : adjCount) : state}\n      </button>\n    </td>\n  );\n}\n\nfunction Field({ args }) {\n  let { mineCount, gameState, setGameState, field, setField } = args;\n  return (\n    <table className=\"field\">\n      <tbody>\n        {field.map((row, rowInd) => {\n          return (\n            <tr key={rowInd}>\n              {row.map((cellData, colInd) => {\n                return (\n                  <Cell\n                    key={colInd}\n                    args={{\n                      ...cellData,\n                      rowInd,\n                      colInd,\n                      mineCount,\n                      gameState,\n                      setGameState,\n                      field,\n                      setField,\n                    }}\n                  />\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport { resetField, skeletonField };\n\nexport default Field;\n","// TODO: style header\n\nimport { useState } from \"react\";\n\nimport { extract } from \"./objectAttributeAccessor.js\";\nimport { resetField } from \"./Field.js\";\n\n// constants\n\nconst difficultyList = [\"Easy\", \"Medium\", \"Hard\"];\nconst inputList = [\"Rows\", \"Columns\", \"Mines\"];\n\n// helper functions\n\nfunction isNumber(str) {\n  return str === \"\" || /^[0-9\\b]+$/.test(str);\n}\n\nfunction isValidInput(inp, inputs) {\n  let { rows, columns, mines } = inputs;\n  switch (inp) {\n    case \"mines\":\n      return 0 <= mines && mines < rows * columns;\n    case \"rows\":\n      return 0 < rows && rows <= 24;\n    case \"columns\":\n      return 0 < columns && columns <= 30;\n    default:\n      // shouldn't happen\n      return false;\n  }\n}\n\nfunction presets(diff) {\n  switch (diff) {\n    case \"easy\":\n      return { rows: 9, columns: 9, mines: 10 };\n    case \"medium\":\n      return { rows: 16, columns: 16, mines: 40 };\n    case \"hard\":\n      return { rows: 16, columns: 30, mines: 99 };\n    default:\n      // shouldn't happen\n      return { rows: 10, columns: 10, mines: 99 };\n  }\n}\n\nfunction displayDifficulty(difficulty) {\n  let diff = difficulty.toLowerCase();\n  let { rows, columns, mines } = presets(diff);\n  return diff + \": \" + rows + \"x\" + columns + \", \" + mines + \" mines\";\n}\n\nfunction tooltip(inp) {\n  // input boxes already enforce digits-only (ie non-negative integers)\n  switch (inp) {\n    case \"rows\":\n      return \"Must be between 1 and 24 inclusive.\";\n    case \"columns\":\n      return \"Must be between 1 and 30 inclusive.\";\n    case \"mines\":\n      return \"Must be fewer mines than cells.\";\n    default:\n      // shouldn't happen\n      return \"An unknown error has occured.\";\n  }\n}\n\n// click handlers\n\nfunction updateDifficulty(e, inputs, setInputs) {\n  setInputs({ ...inputs, difficulty: e.target.value });\n}\n\nfunction updateAnInput(e, inputs, setInputs, inp) {\n  let str = e.target.value;\n  let num = +str;\n  // only proceed if the value consists of digits (or is blank)\n  if (isNumber(str)) {\n    setInputs({ ...inputs, [inp]: num });\n  }\n}\n\nfunction adjustNumber(inp, inputs, setInputs, change) {\n  let num = extract(inputs, inp); //inputs.[inp] // prettier doesn't like it\n  // only proceed if the number will remain positive\n  if (change > 0 || num > 0) {\n    setInputs({ ...inputs, [inp]: num + change });\n  }\n}\n\nfunction startCustom(inputs, setMineCount, setGameState, setField) {\n  let isValid = inputList.every((input) =>\n    isValidInput(input.toLowerCase(), inputs)\n  );\n  if (isValid) {\n    // discard difficulty from inputs\n    resetField(inputs, setMineCount, setGameState, setField);\n  } else {\n    alert('Invalid parameters. However over red \"x\"s for details.');\n  }\n}\n\nfunction startStandard(diff, setMineCount, setGameState, setField) {\n  // based on radio button selection so always valid\n  let inputs = presets(diff);\n  resetField(inputs, setMineCount, setGameState, setField);\n}\n\n// function components\n\nfunction DifficultyRadio({ difficulty, inputs, setInputs }) {\n  let diff = difficulty.toLowerCase();\n  return (\n    <>\n      <input\n        type=\"radio\"\n        id={diff}\n        name=\"difficulty\"\n        value={diff}\n        checked={inputs.difficulty === diff}\n        onChange={(e) => updateDifficulty(e, inputs, setInputs)}\n      />\n      <label htmlFor={diff}>{displayDifficulty(difficulty)}</label>\n    </>\n  );\n}\n\nfunction Input({ input, inputs, setInputs }) {\n  let inp = input.toLowerCase();\n  return (\n    <label htmlFor={inp}>\n      {input}:\n      <button\n        type=\"button\"\n        onClick={() => adjustNumber(inp, inputs, setInputs, -1)}\n      >\n        -\n      </button>\n      <input\n        type=\"text\"\n        id={inp}\n        name={inp}\n        value={extract(inputs, inp)} //{inputs.[inp]} // prettier doesn't like it\n        onChange={(e) => updateAnInput(e, inputs, setInputs, inp)}\n      />\n      <button\n        type=\"button\"\n        onClick={() => adjustNumber(inp, inputs, setInputs, 1)}\n      >\n        +\n      </button>\n      {isValidInput(inp, inputs) ? (\n        <span style={{ color: \"green\" }}>&#10003;</span>\n      ) : (\n        <span className=\"toolcontainer\" style={{ color: \"red\" }}>\n          &#10007;<span className=\"tooltip\">{tooltip(inp)}</span>\n        </span>\n      )}\n      {input === \"Mines\" && (\n        <div>\n          <label>Mine density:</label>\n          {inputs.rows > 0 && inputs.columns > 0\n            ? Math.round(\n                (100 * inputs.mines) / (inputs.rows * inputs.columns)\n              ) + \"%\"\n            : \"N/A\"}\n        </div>\n      )}\n    </label>\n  );\n}\n\n// primary component\n\nfunction Header({ args }) {\n  let { setMineCount, setGameState, setField } = args;\n\n  const [inputs, setInputs] = useState({\n    rows: 9,\n    columns: 9,\n    mines: 10,\n    difficulty: \"easy\",\n  });\n\n  return (\n    <>\n      {/* directions */}\n      <p>Select a standard difficulty, or specify custom parameters.</p>\n      <p>\n        For a custom game, a mine density between 12% and 20% is recommended.\n      </p>\n\n      {/* standard game options */}\n      {difficultyList.map((difficulty) => {\n        return (\n          <DifficultyRadio\n            key={difficulty}\n            difficulty={difficulty}\n            inputs={inputs}\n            setInputs={setInputs}\n          />\n        );\n      })}\n      <button\n        type=\"button\"\n        onClick={() =>\n          startStandard(inputs.difficulty, setMineCount, setGameState, setField)\n        }\n      >\n        Start Standard Game\n      </button>\n\n      {/* // TEMP: */}\n      <br />\n\n      {/* custom game inputs */}\n      {inputList.map((input) => {\n        return (\n          <Input\n            key={input}\n            input={input}\n            inputs={inputs}\n            setInputs={setInputs}\n          />\n        );\n      })}\n      <button\n        type=\"button\"\n        onClick={() =>\n          startCustom(inputs, setMineCount, setGameState, setField)\n        }\n      >\n        Start Custom Game\n      </button>\n    </>\n  );\n}\n\nexport default Header;\n\n// for testing\n\nexport { isNumber, isValidInput };\n","import { useState } from \"react\";\n\n// TODO: actual rules text\nfunction RulesText() {\n  return (\n    <div>\n      <h3>Rules</h3>\n      <p>Do this.</p>\n      <p>Don't do that.</p>\n    </div>\n  );\n}\n\nfunction Rules() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <button type=\"button\" onClick={() => setIsOpen(!isOpen)}>\n        {isOpen ? \"Hide Rules\" : \"Show Rules\"}\n      </button>\n      {isOpen && <RulesText />}\n    </>\n  );\n}\n\nexport default Rules;\n","// TODO: timer, if not too difficulty\n// TODO: high-scores, if local storage is easy\n// TODO: style footer\n\nimport Rules from \"./Rules.js\";\n\nfunction Footer() {\n  return (\n    <>\n      {/* rules pop-up */}\n      <Rules />\n    </>\n  );\n}\n\nexport default Footer;\n","import { useState } from \"react\";\n\nimport Header from \"./Header.js\";\nimport Field from \"./Field.js\";\nimport Footer from \"./Footer\";\n\nimport { skeletonField } from \"./generateField.js\";\n\nimport \"./index.css\";\nimport \"./field.css\";\n\n// TODO: remove all console logs\n\nfunction App() {\n  // Constants\n\n  const [mineCount, setMineCount] = useState(10);\n  const [gameState, setGameState] = useState(\"reset\");\n  // each cell is hasMine (t/f), state (show/hide/flag), adjCount (#)\n  const [field, setField] = useState(skeletonField(9, 9));\n\n  return (\n    <>\n      <h1>Minesweeper</h1>\n      <Header args={{ setMineCount, setGameState, setField }} />\n      <Field args={{ mineCount, gameState, setGameState, field, setField }} />\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}