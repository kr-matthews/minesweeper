{"version":3,"sources":["objectAttributeAccessor.js","generateField.js","Field.js","Header.js","Rules.js","Footer.js","App.js","index.js"],"names":["extract","obj","attr","directions","skeletonField","rows","columns","newField","i","newRow","j","push","state","adjCount","generateMines","rowInd","colInd","mineCount","field","setField","length","m","n","cellCount","adjCellCount","getNeighbours","excessMines","Math","max","nonClickAdjArr","clickAdjArr","r","c","hasMine","isNeighbour","pop","mineArraysToField","generateShuffledMineArray","forEach","r0","c0","assignAdjCounts","len","mines","arr","swap_i","getRandomInt","shuffle","d1","abs","d2","map","dr","dc","filter","lower","upper","floor","random","resetField","inputs","setMineCount","setRevealCount","setGameState","handleClick","gameState","cell","stack","revealCount","cascadeReveal","Cell","args","className","type","onClick","Field","row","cellData","difficultyList","inputList","isValidInput","inp","presets","diff","displayDifficulty","difficulty","toLowerCase","tooltip","adjustNumber","setInputs","change","num","DifficultyRadio","id","name","value","checked","onChange","e","target","updateDifficulty","htmlFor","Input","input","str","test","isNumber","updateAnInput","style","color","round","Header","useState","startStandard","every","alert","startCustom","RulesText","Rules","isOpen","setIsOpen","Footer","App","useEffect","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7412fc1.chunk.js","sourcesContent":["export function extract(obj, attr) {\n  return obj.[attr];\n}\n","const directions = [\n  [-1, 1],\n  [0, 1],\n  [1, 1],\n  [1, 0],\n  [1, -1],\n  [0, -1],\n  [-1, -1],\n  [-1, 0],\n];\n\nfunction skeletonField(rows, columns) {\n  let newField = [];\n  for (var i = 0; i < rows; i++) {\n    // create a new row in the field\n    let newRow = [];\n    for (var j = 0; j < columns; j++) {\n      // create a new cell in the row\n      newRow.push({ state: \"hide\", adjCount: 0 });\n    }\n    newField.push(newRow);\n  }\n  return newField;\n}\n\n// TODO: improve comments for this function\n// add mine locations and adj counts to field, given first click location\n//  (clicked cell should be a 0 if possible)\nfunction generateMines(rowInd, colInd, mineCount, field, setField) {\n  let [m, n] = [field.length, field[0].length];\n  let cellCount = m * n;\n  let adjCellCount = getNeighbours(rowInd, colInd, m, n).length;\n  let excessMines = Math.max(0, mineCount - (cellCount - (adjCellCount + 1)));\n  // generate shuffled array for mine locations of non-adjacent cells\n  let nonClickAdjArr = generateShuffledMineArray(\n    cellCount - (adjCellCount + 1),\n    mineCount - excessMines\n  );\n  // generate shuffled array for mine locations of adjacent cells\n  let clickAdjArr = generateShuffledMineArray(adjCellCount, excessMines);\n  // add mines to actual field state\n  mineArraysToField(\n    rowInd,\n    colInd,\n    nonClickAdjArr,\n    clickAdjArr,\n    field,\n    setField\n  );\n  // assign arj counts based on newly placed mines\n  assignAdjCounts(field, setField);\n}\n\n// shuffled array of length len with max(mines,len) mines\nfunction generateShuffledMineArray(len, mines) {\n  let arr = [];\n  // create sorted array with mines...\n  for (let i = 0; i < len; i++) {\n    if (i < mines) {\n      arr.push(true);\n    } else {\n      arr.push(false);\n    }\n  }\n  // ... and then shuffle it\n  return shuffle(arr);\n}\n\nfunction shuffle(arr) {\n  for (let i = 0; i < arr.length; i++) {\n    let swap_i = getRandomInt(i, arr.length - 1);\n    [arr[i], arr[swap_i]] = [arr[swap_i], arr[i]];\n  }\n  return arr;\n}\n\nfunction mineArraysToField(\n  rowInd,\n  colInd,\n  nonClickAdjArr,\n  clickAdjArr,\n  field,\n  setField\n) {\n  let newField = [...field];\n  for (let r = 0; r < field.length; r++) {\n    for (let c = 0; c < field[0].length; c++) {\n      if (r === rowInd && c === colInd) {\n        newField[r][c].hasMine = false;\n      } else if (isNeighbour(r, c, rowInd, colInd)) {\n        newField[r][c].hasMine = clickAdjArr.pop();\n      } else {\n        newField[r][c].hasMine = nonClickAdjArr.pop();\n      }\n    }\n  }\n  setField(newField);\n}\n\nfunction isNeighbour(r, c, r0, c0) {\n  let d1 = Math.abs(r - r0);\n  let d2 = Math.abs(c - c0);\n  return d1 <= 1 && d2 <= 1 && d1 + d2 > 0;\n}\n\nfunction assignAdjCounts(field, setField) {\n  let newField = [...field];\n  for (let r = 0; r < field.length; r++) {\n    for (let c = 0; c < field[0].length; c++) {\n      getNeighbours(r, c, field.length, field[0].length).forEach(([r0, c0]) => {\n        if (field[r0][c0].hasMine) {\n          newField[r][c].adjCount += 1;\n        }\n      });\n    }\n  }\n  setField(newField);\n}\n\nfunction getNeighbours(r, c, m, n) {\n  return directions\n    .map(([dr, dc]) => [r + dr, c + dc])\n    .filter(([r0, c0]) => 0 <= r0 && r0 < m && 0 <= c0 && c0 < n);\n}\n\n// inclusive of end-points\nfunction getRandomInt(lower, upper) {\n  return Math.floor(Math.random() * (upper - lower + 1)) + lower;\n}\n\nexport { skeletonField, generateMines, getNeighbours };\n\n// testing\n\n//export { getNeighbours };\n","// TODO: redo Cell component to deal with all cases\n// TODO: style cells\n\nimport {\n  skeletonField,\n  generateMines,\n  getNeighbours,\n} from \"./generateField.js\";\n\nfunction resetField(\n  inputs,\n  setMineCount,\n  setRevealCount,\n  setGameState,\n  setField\n) {\n  let { rows, columns, mines } = inputs;\n  setGameState(\"reset\");\n  setMineCount(mines);\n  setRevealCount(0);\n  // create a new field with no data (wait until first click)\n  setField(skeletonField(rows, columns));\n}\n\n// have stack of hidden, non-mine cells\n// reveal each, and if adjCount is 0, add all neighbours to stack\nfunction cascadeReveal(stack, setRevealCount, field, setField) {\n  while (stack.length > 0) {\n    let [r, c] = stack.pop();\n    // otherwise already processed it earlier in the stack\n    if (field[r][c].state === \"hide\") {\n      // reveal it\n      let newField = [...field];\n      newField[r][c].state = \"show\";\n      setField(newField);\n      // update revealCount\n      setRevealCount((revealCount) => revealCount + 1);\n      // if it's adjCount is 0, add hidden neighbours to stack\n      if (field[r][c].adjCount === 0) {\n        getNeighbours(r, c, field.length, field[0].length).forEach(\n          ([r0, c0]) => {\n            if (field[r0][c0].state === \"hide\") {\n              stack.push([r0, c0]);\n            }\n          }\n        );\n      }\n    }\n  }\n}\n\nfunction handleClick(\n  rowInd,\n  colInd,\n  mineCount,\n  setRevealCount,\n  gameState,\n  setGameState,\n  field,\n  setField\n) {\n  let cell = field[rowInd][colInd];\n  // generate the mines if this is the first click\n  if (gameState === \"reset\") {\n    setGameState(\"ongoing\");\n    generateMines(rowInd, colInd, mineCount, field, setField);\n  }\n  // now reveal the cell and perform other actions as necessary\n  if (cell.hasMine) {\n    // just lost: reveal current cell...\n    let newField = [...field];\n    newField[rowInd][colInd].state = \"show\";\n    setField(newField);\n    // ... and  trigger loss\n    setGameState(\"lost\");\n  } else if (cell.state === \"hide\") {\n    // no mine: reveal cell, and iterate on any neighbours with 0 adj mines\n    cascadeReveal([[rowInd, colInd]], setRevealCount, field, setField);\n    // there is a useEffect to check when the game is won\n  }\n}\n\n// always return a button, style it differently based on classname\n// won't act like a button sometimes\nfunction Cell({ args }) {\n  let {\n    rowInd,\n    colInd,\n    hasMine,\n    setRevealCount,\n    state,\n    adjCount,\n    mineCount,\n    gameState,\n    setGameState,\n    field,\n    setField,\n  } = args;\n  return (\n    <td className=\"cell\">\n      <button\n        type=\"button\"\n        className=\"clickable todo\"\n        onClick={() =>\n          handleClick(\n            rowInd,\n            colInd,\n            mineCount,\n            setRevealCount,\n            gameState,\n            setGameState,\n            field,\n            setField\n          )\n        }\n      >\n        {/* TEMP: should be \"show\" not \"hide\" */}\n        {state === \"show\" ? (hasMine ? \"M\" : adjCount) : state}\n        {/* hasMine ? \"M\" : adjCount */}\n      </button>\n    </td>\n  );\n}\n\nfunction Field({ args }) {\n  let {\n    mineCount,\n    setRevealCount,\n    gameState,\n    setGameState,\n    field,\n    setField,\n  } = args;\n  return (\n    <table className=\"field\">\n      <tbody>\n        {field.map((row, rowInd) => {\n          return (\n            <tr key={rowInd}>\n              {row.map((cellData, colInd) => {\n                return (\n                  <Cell\n                    key={colInd}\n                    args={{\n                      ...cellData,\n                      rowInd,\n                      colInd,\n                      mineCount,\n                      setRevealCount,\n                      gameState,\n                      setGameState,\n                      field,\n                      setField,\n                    }}\n                  />\n                );\n              })}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport { resetField, skeletonField };\n\nexport default Field;\n","// TODO: style header\n\nimport { useState } from \"react\";\n\nimport { extract } from \"./objectAttributeAccessor.js\";\nimport { resetField } from \"./Field.js\";\n\n// constants\n\nconst difficultyList = [\"Easy\", \"Medium\", \"Hard\"];\nconst inputList = [\"Rows\", \"Columns\", \"Mines\"];\n\n// helper functions\n\nfunction isNumber(str) {\n  return str === \"\" || /^[0-9\\b]+$/.test(str);\n}\n\nfunction isValidInput(inp, inputs) {\n  let { rows, columns, mines } = inputs;\n  switch (inp) {\n    case \"mines\":\n      return 0 <= mines && mines < rows * columns;\n    case \"rows\":\n      return 0 < rows && rows <= 24;\n    case \"columns\":\n      return 0 < columns && columns <= 30;\n    default:\n      // shouldn't happen\n      return false;\n  }\n}\n\nfunction presets(diff) {\n  switch (diff) {\n    case \"easy\":\n      return { rows: 9, columns: 9, mines: 10 };\n    case \"medium\":\n      return { rows: 16, columns: 16, mines: 40 };\n    case \"hard\":\n      return { rows: 16, columns: 30, mines: 99 };\n    default:\n      // shouldn't happen\n      return { rows: 10, columns: 10, mines: 99 };\n  }\n}\n\nfunction displayDifficulty(difficulty) {\n  let diff = difficulty.toLowerCase();\n  let { rows, columns, mines } = presets(diff);\n  return diff + \": \" + rows + \"x\" + columns + \", \" + mines + \" mines\";\n}\n\nfunction tooltip(inp) {\n  // input boxes already enforce digits-only (ie non-negative integers)\n  switch (inp) {\n    case \"rows\":\n      return \"Must be between 1 and 24 inclusive.\";\n    case \"columns\":\n      return \"Must be between 1 and 30 inclusive.\";\n    case \"mines\":\n      return \"Must be fewer mines than cells.\";\n    default:\n      // shouldn't happen\n      return \"An unknown error has occured.\";\n  }\n}\n\n// click handlers\n\nfunction updateDifficulty(e, inputs, setInputs) {\n  setInputs({ ...inputs, difficulty: e.target.value });\n}\n\nfunction updateAnInput(e, inputs, setInputs, inp) {\n  let str = e.target.value;\n  let num = +str;\n  // only proceed if the value consists of digits (or is blank)\n  if (isNumber(str)) {\n    setInputs({ ...inputs, [inp]: num });\n  }\n}\n\nfunction adjustNumber(inp, inputs, setInputs, change) {\n  let num = extract(inputs, inp); //inputs.[inp] // prettier doesn't like it\n  // only proceed if the number will remain positive\n  if (change > 0 || num > 0) {\n    setInputs({ ...inputs, [inp]: num + change });\n  }\n}\n\nfunction startCustom(\n  inputs,\n  setMineCount,\n  setRevealCount,\n  setGameState,\n  setField\n) {\n  let isValid = inputList.every((input) =>\n    isValidInput(input.toLowerCase(), inputs)\n  );\n  if (isValid) {\n    // discard difficulty from inputs\n    resetField(inputs, setMineCount, setRevealCount, setGameState, setField);\n  } else {\n    alert('Invalid parameters. However over red \"x\"s for details.');\n  }\n}\n\nfunction startStandard(\n  diff,\n  setMineCount,\n  setRevealCount,\n  setGameState,\n  setField\n) {\n  // based on radio button selection so always valid\n  let inputs = presets(diff);\n  resetField(inputs, setMineCount, setRevealCount, setGameState, setField);\n}\n\n// function components\n\nfunction DifficultyRadio({ difficulty, inputs, setInputs }) {\n  let diff = difficulty.toLowerCase();\n  return (\n    <>\n      <input\n        type=\"radio\"\n        id={diff}\n        name=\"difficulty\"\n        value={diff}\n        checked={inputs.difficulty === diff}\n        onChange={(e) => updateDifficulty(e, inputs, setInputs)}\n      />\n      <label htmlFor={diff}>{displayDifficulty(difficulty)}</label>\n    </>\n  );\n}\n\nfunction Input({ input, inputs, setInputs }) {\n  let inp = input.toLowerCase();\n  return (\n    <label htmlFor={inp}>\n      {input}:\n      <button\n        type=\"button\"\n        onClick={() => adjustNumber(inp, inputs, setInputs, -1)}\n      >\n        -\n      </button>\n      <input\n        type=\"text\"\n        id={inp}\n        name={inp}\n        value={extract(inputs, inp)} //{inputs.[inp]} // prettier doesn't like it\n        onChange={(e) => updateAnInput(e, inputs, setInputs, inp)}\n      />\n      <button\n        type=\"button\"\n        onClick={() => adjustNumber(inp, inputs, setInputs, 1)}\n      >\n        +\n      </button>\n      {isValidInput(inp, inputs) ? (\n        <span style={{ color: \"green\" }}>&#10003;</span>\n      ) : (\n        <span className=\"toolcontainer\" style={{ color: \"red\" }}>\n          &#10007;<span className=\"tooltip\">{tooltip(inp)}</span>\n        </span>\n      )}\n      {input === \"Mines\" && (\n        <div>\n          <label>Mine density:</label>\n          {inputs.rows > 0 && inputs.columns > 0\n            ? Math.round(\n                (100 * inputs.mines) / (inputs.rows * inputs.columns)\n              ) + \"%\"\n            : \"N/A\"}\n        </div>\n      )}\n    </label>\n  );\n}\n\n// primary component\n\nfunction Header({ args }) {\n  let { setMineCount, setRevealCount, setGameState, setField } = args;\n\n  const [inputs, setInputs] = useState({\n    rows: 9,\n    columns: 9,\n    mines: 10,\n    difficulty: \"easy\",\n  });\n\n  return (\n    <>\n      {/* directions */}\n      <p>Select a standard difficulty, or specify custom parameters.</p>\n      <p>\n        For a custom game, a mine density between 12% and 20% is recommended.\n      </p>\n\n      {/* standard game options */}\n      {difficultyList.map((difficulty) => {\n        return (\n          <DifficultyRadio\n            key={difficulty}\n            difficulty={difficulty}\n            inputs={inputs}\n            setInputs={setInputs}\n          />\n        );\n      })}\n      <button\n        type=\"button\"\n        onClick={() =>\n          startStandard(\n            inputs.difficulty,\n            setMineCount,\n            setRevealCount,\n            setGameState,\n            setField\n          )\n        }\n      >\n        Start Standard Game\n      </button>\n\n      {/* // TEMP: */}\n      <br />\n\n      {/* custom game inputs */}\n      {inputList.map((input) => {\n        return (\n          <Input\n            key={input}\n            input={input}\n            inputs={inputs}\n            setInputs={setInputs}\n          />\n        );\n      })}\n      <button\n        type=\"button\"\n        onClick={() =>\n          startCustom(\n            inputs,\n            setMineCount,\n            setRevealCount,\n            setGameState,\n            setField\n          )\n        }\n      >\n        Start Custom Game\n      </button>\n    </>\n  );\n}\n\nexport default Header;\n\n// for testing\n\nexport { isNumber, isValidInput };\n","import { useState } from \"react\";\n\n// TODO: actual rules text\nfunction RulesText() {\n  return (\n    <div>\n      <h3>Rules</h3>\n      <p>Do this.</p>\n      <p>Don't do that.</p>\n    </div>\n  );\n}\n\nfunction Rules() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <>\n      <button type=\"button\" onClick={() => setIsOpen(!isOpen)}>\n        {isOpen ? \"Hide Rules\" : \"Show Rules\"}\n      </button>\n      {isOpen && <RulesText />}\n    </>\n  );\n}\n\nexport default Rules;\n","// TODO: add links to related: https://pwmarcz.pl/kaboom/ and https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/mines.html\n// TODO: timer, if not too difficulty\n// TODO: high-scores, if local storage is easy\n// TODO: style footer\n\nimport Rules from \"./Rules.js\";\n\nfunction Footer({ args }) {\n  let { gameState } = args;\n  return (\n    <>\n      <p>The game is {gameState}.</p>\n      <Rules />\n    </>\n  );\n}\n\nexport default Footer;\n","import { useState, useEffect } from \"react\";\n\nimport Header from \"./Header.js\";\nimport Field from \"./Field.js\";\nimport Footer from \"./Footer\";\n\nimport { skeletonField } from \"./generateField.js\";\n\nimport \"./index.css\";\nimport \"./field.css\";\n\nfunction App() {\n  // Constants\n\n  const [mineCount, setMineCount] = useState(10);\n  // how many non-mine cells have been revealed\n  const [revealCount, setRevealCount] = useState(0);\n  // reset, ongoing, won, lost\n  const [gameState, setGameState] = useState(\"reset\");\n  // each cell is hasMine (t/f), state (show/hide/flag), adjCount (#)\n  const [field, setField] = useState(skeletonField(9, 9));\n\n  // effects\n\n  // check whether game is won\n  useEffect(() => {\n    if (revealCount + mineCount === field.length * field[0].length) {\n      setGameState(\"won\");\n    }\n  }, [revealCount, mineCount, field]);\n\n  // return\n\n  return (\n    <>\n      <h1>Minesweeper</h1>\n      <Header args={{ setMineCount, setRevealCount, setGameState, setField }} />\n      <Field\n        args={{\n          mineCount,\n          gameState,\n          setGameState,\n          field,\n          setField,\n          setRevealCount,\n        }}\n      />\n      <Footer args={{ gameState }} />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}